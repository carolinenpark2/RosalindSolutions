#DNA
dna = 'AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'

def count_dna(s):
    count_a = s.count('A')
    count_c = s.count('C')
    count_g = s.count('G')
    count_t = s.count('T')
    return count_a, count_c, count_g, count_t

count_dna(dna)

#RNA
dna = 'GATGGAACTTGACTACGTAAATT'

def transcribe_dna(t):
    return t.replace('T', 'U')

transcribe_dna(dna)

#REVC
dna = 'AAAACCCGGT'

def reverse_complement(s):
    complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
    reverse_complement = ''
    for base in s[::-1]:
        reverse_complement += complement[base]
    return reverse_complement

reverse_complement(dna)

#GC
data = '>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC\
>Rosalind_0808\
CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\
TGGGAACCTGCGGGCAGTAGGTGGAAT'

def gc_content(s):
  for i in s:
    if i.startswith('>'):
      print(i[1:])
  else:
    count_c = i.count('C')
    count_g = i.count('G')
    total = count_c + count_g
    percent = (total / len(i)) * 100
  
gc_content(data)


#HAMM

string_1= 'GAGCCTACTAACGGGAT'
string_2 = 'CATCGTAATGACGGCCT'

def hamming(s, t):
    count = 0
    for i in range(len(s)):
        if s[i] != t[i]:
            count += 1
    return count

hamming(string_1, string_2)
