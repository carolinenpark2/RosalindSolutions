#DNA
dna = 'AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'

def count_dna(s):
    count_a = s.count('A')
    count_c = s.count('C')
    count_g = s.count('G')
    count_t = s.count('T')
    return count_a, count_c, count_g, count_t

count_dna(dna)

#RNA
dna = 'GATGGAACTTGACTACGTAAATT'

def transcribe_dna(t):
    return t.replace('T', 'U')

transcribe_dna(dna)

#REVC
dna = 'AAAACCCGGT'

def reverse_complement(s):
    complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
    reverse_complement = ''
    for base in s[::-1]:
        reverse_complement += complement[base]
    return reverse_complement

reverse_complement(dna)

#GC
data = '>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC\
>Rosalind_0808\
CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\
TGGGAACCTGCGGGCAGTAGGTGGAAT'

def gc_content(s):
  for i in s:
    if i.startswith('>'):
      print(i[1:])
  else:
    count_c = i.count('C')
    count_g = i.count('G')
    total = count_c + count_g
    percent = (total / len(i)) * 100
  
gc_content(data)


#HAMM

string_1= 'GAGCCTACTAACGGGAT'
string_2 = 'CATCGTAATGACGGCCT'

def hamming(s, t):
    count = 0
    for i in range(len(s)):
        if s[i] != t[i]:
            count += 1
    return count

hamming(string_1, string_2)


#PROT

rna_codon = {
    "UUU": "F", "UUC": "F",  # Phenylalanine
    "UUA": "L", "UUG": "L",  # Leucine
    "CUU": "L", "CUC": "L", "CUA": "L", "CUG": "L",  # Leucine
    "AUU": "I", "AUC": "I", "AUA": "I",  # Isoleucine
    "AUG": "M",  # Methionine (Start codon)
    "GUU": "V", "GUC": "V", "GUA": "V", "GUG": "V",  # Valine
    "UCU": "S", "UCC": "S", "UCA": "S", "UCG": "S",  # Serine
    "CCU": "P", "CCC": "P", "CCA": "P", "CCG": "P",  # Proline
    "ACU": "T", "ACC": "T", "ACA": "T", "ACG": "T",  # Threonine
    "GCU": "A", "GCC": "A", "GCA": "A", "GCG": "A",  # Alanine
    "UAU": "Y", "UAC": "Y",  # Tyrosine
    "UAA": "Stop", "UAG": "Stop", "UGA": "Stop",  # Stop codons
    "CAU": "H", "CAC": "H",  # Histidine
    "CAA": "Q", "CAG": "Q",  # Glutamine
    "AAU": "N", "AAC": "N",  # Asparagine
    "AAA": "K", "AAG": "K",  # Lysine
    "GAU": "D", "GAC": "D",  # Aspartic acid
    "GAA": "E", "GAG": "E",  # Glutamic acid
    "UGU": "C", "UGC": "C",  # Cysteine
    "UGG": "W",  # Tryptophan
    "CGU": "R", "CGC": "R", "CGA": "R", "CGG": "R",  # Arginine
    "AGU": "S", "AGC": "S",  # Serine
    "AGA": "R", "AGG": "R",  # Arginine
    "GGU": "G", "GGC": "G", "GGA": "G", "GGG": "G"  # Glycine
}




rna='AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA'

def protein(s):
    protein = ''
    for i in range(0, len(s), 3):
        codon = s[i:i+3]
        if codon in codon:
            protein += rna_codon[codon]
        else:
            break
    return protein
protein(rna)
