#SUBS
string = 'GATATATGCATATACTT'
substring = 'ATAT'

def loc_substring(s, t):
    locations = []
    for i in range(len(s)):
        if s[i:i+len(t)] == t:
            locations.append(i+1)
    return locations

loc_substring(string, substring)

#PRTM

monoisotopic_mass_table =  {
        'A': 71.03711, 'C': 103.00919, 'D': 115.02694, 'E': 129.04259, 'F': 147.06841,
        'G': 57.02146, 'H': 137.05891, 'I': 113.08406, 'K': 128.09496, 'L': 113.08406,
        'M': 131.04049, 'N': 114.04293, 'P': 97.05276, 'Q': 128.05858, 'R': 156.10111,
        'S': 87.03203, 'T': 101.04768, 'V': 99.06841, 'W': 186.07931, 'Y': 163.06333
}

data = 'SKADYEK'

def total_mass(protein):
    total_mass = 0
    for i in protein:
        total_mass += monoisotopic_mass_table[i]
    return total_mass

total_mass(data)

#SPLC

codon_table = {
    "UUU": "F", "UUC": "F", "UUA": "L", "UUG": "L",
    "UCU": "S", "UCC": "S", "UCA": "S", "UCG": "S",
    "UAU": "Y", "UAC": "Y", "UAA": "*", "UAG": "*",
    "UGU": "C", "UGC": "C", "UGA": "*", "UGG": "W",
    "CUU": "L", "CUC": "L", "CUA": "L", "CUG": "L",
    "CCU": "P", "CCC": "P", "CCA": "P", "CCG": "P",
    "CAU": "H", "CAC": "H", "CAA": "Q", "CAG": "Q",
    "CGU": "R", "CGC": "R", "CGA": "R", "CGG": "R",
    "AUU": "I", "AUC": "I", "AUA": "I", "AUG": "M",
    "ACU": "T", "ACC": "T", "ACA": "T", "ACG": "T",
    "AAU": "N", "AAC": "N", "AAA": "K", "AAG": "K",
    "AGU": "S", "AGC": "S", "AGA": "R", "AGG": "R",
    "GUU": "V", "GUC": "V", "GUA": "V", "GUG": "V",
    "GCU": "A", "GCC": "A", "GCA": "A", "GCG": "A",
    "GAU": "D", "GAC": "D", "GAA": "E", "GAG": "E",
    "GGU": "G", "GGC": "G", "GGA": "G", "GGG": "G"
}

data = 'ATGGTCTACATAGCTGACAAACAGCACGTAGCAATCGGTCGAATCTCGAGAGGCATATGGTCACATGATCGGTCGAGCGTGTTTCAAAGTTTGCGCCTAG'
seq = ['ATCGGTCGAA', 'ATCGGTCGAGCGT']


def splice(string, introns):
    for i in introns:
        string = string.replace(i, '')
    string = string.replace('T', 'U')
    protein = ''
    for i in range(0, len(string), 3):
      if len(string[i:i+3]) == 3:
        codon = string[i:i+3]
        protein += codon_table[codon]
    return protein

splice(data, seq)

#REVP

def rev_comp(string):
  complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
  string = string.strip()
  reverse_complement = ''.join([complement.get(base, '') for base in string[::-1]])
  return reverse_complement

data = 'TCAATGCATGCGGGTCTATATGCAT'

def rev_pal(dna):
  low = 4
  high = 12
  for i in range(len(dna)-low):
    for n in range(low, high):
      if dna[i:i+n] == rev_comp(dna[i:i+n]) and len(dna[i:i+n])==n:
        print(i+1, n)

rev_pal(data)

#TRAN

transition = [('A','G'), ('T','C'), ('C','T'), ('G','A')]
transversion = [('A','T'), ('A','C'), ('T','A'),('T','G'),('C','A'), ('C','G'), ('G', 'T'), ('G','C')] 

string1 = 'GCAACGCACAACGAAAACCCTTAGGGACTGGATTATTTCGTGATCGTTGTAGTTATTGGA\
AGTACGGGCATCAACCCAGTT'
string2 ='TTATCTGACAAAGAAAGCCGTCAACGGCTGGATAATTTCGCGATCGTGCTGGTTACTGGC\
GGTACGAGTGTTCCTTTGGGT'

def tran(s1, s2):
  transition_count = 0
  transversion_count = 0
  for i in range(len(s1)):
    if (s1[i], s2[i]) in transition:
      transition_count += 1
    elif (s1[i], s2[i]) in transversion:
      transversion_count += 1
  return transition_count/transversion_count
 
tran(string1,string2)

#LCSM

data = ['GATTACA','TAGACCA','ATACA']

def motif(strings):
  seq1 = strings[0]
  other = strings[1:]
  motif =[]
  for i in range(len(seq1)):
    for n in range(len(seq1)):
      if all(seq1[i:i+n] in string for string in other):
        motif.append(seq1[i:i+n])
  return max(motif, key=len)
      
motif(data)

#ORF
